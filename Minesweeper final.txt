package Project;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.List;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;

class Difficulty {
    public final int rows, cols, bombs;
    public final String name;

    public Difficulty(String name, int rows, int cols, int bombs) {
        this.name = name;
        this.rows = rows;
        this.cols = cols;
        this.bombs = bombs;
    }

    public static final Difficulty EASY = new Difficulty("Easy", 8, 8, 10);
    public static final Difficulty MEDIUM = new Difficulty("Medium", 10, 10, 15);
    public static final Difficulty HARD = new Difficulty("Hard", 14, 14, 30);

    public static Difficulty[] values() {
        return new Difficulty[]{EASY, MEDIUM, HARD};
    }

    @Override
    public String toString() {
        return name;
    }
}

class Cell {
    private boolean bomb;
    private boolean revealed;
    private boolean flagged;
    private int nearbyBombs;

    public Cell() {
        bomb = false;
        revealed = false;
        flagged = false;
        nearbyBombs = 0;
    }

    public boolean isBomb() { return bomb; }
    public void setBomb(boolean bomb) { this.bomb = bomb; }

    public boolean isRevealed() { return revealed; }
    public void setRevealed(boolean revealed) { this.revealed = revealed; }

    public boolean isFlagged() { return flagged; }
    public void setFlagged(boolean flagged) { this.flagged = flagged; }

    public int getNearbyBombs() { return nearbyBombs; }
    public void setNearbyBombs(int nearbyBombs) { this.nearbyBombs = nearbyBombs; }

    public void toggleFlag() {
        if (!revealed) {
            flagged = !flagged;
        }
    }
}

class Grid {
    private final int rows, cols, bombs;
    private final Cell[][] cells;
    private boolean gameOver;
    private boolean gameWon;
    private boolean firstClick;

    public Grid(int rows, int cols, int bombs) {
        this.rows = rows;
        this.cols = cols;
        this.bombs = bombs;
        this.cells = new Cell[rows][cols];
        this.gameOver = false;
        this.gameWon = false;
        this.firstClick = true;

        initializeCells();
    }

    private void initializeCells() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cells[i][j] = new Cell();
            }
        }
    }

    public void placeBombs(int safeX, int safeY) {
        Random rand = new Random();
        int placed = 0;
        while (placed < bombs) {
            int i = rand.nextInt(rows);
            int j = rand.nextInt(cols);
            if (!cells[i][j].isBomb() && (Math.abs(i - safeX) > 1 || Math.abs(j - safeY) > 1)) {
                cells[i][j].setBomb(true);
                placed++;
            }
        }
        calculateNearbyBombs();
    }

    private void calculateNearbyBombs() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int count = 0;
                for (int dx = -1; dx <= 1; dx++) {
                    for (int dy = -1; dy <= 1; dy++) {
                        int ni = i + dx, nj = j + dy;
                        if (isValidPosition(ni, nj) && cells[ni][nj].isBomb()) {
                            count++;
                        }
                    }
                }
                cells[i][j].setNearbyBombs(count);
            }
        }
    }

    private boolean isValidPosition(int x, int y) {
        return x >= 0 && x < rows && y >= 0 && y < cols;
    }

    public void reveal(int x, int y) {
        if (!isValidPosition(x, y)) return;

        Cell cell = cells[x][y];
        if (cell.isRevealed() || cell.isFlagged()) return;

        if (firstClick) {
            placeBombs(x, y);
            firstClick = false;
        }

        cell.setRevealed(true);
        if (cell.isBomb()) {
            gameOver = true;
            return;
        }

        if (cell.getNearbyBombs() == 0) {
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    if (dx != 0 || dy != 0) {
                        reveal(x + dx, y + dy);
                    }
                }
            }
        }

        checkWin();
    }

    private void checkWin() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                Cell c = cells[i][j];
                if (!c.isBomb() && !c.isRevealed()) {
                    return;
                }
            }
        }
        gameWon = true;
        gameOver = true;
    }

    public boolean toggleFlag(int x, int y) {
        if (!isValidPosition(x, y)) return false;

        Cell cell = cells[x][y];
        if (!cell.isRevealed()) {
            cell.toggleFlag();
            return true;
        }
        return false;
    }

    public boolean isSafeCell(int x, int y) {
        if (!isValidPosition(x, y)) return false;
        Cell cell = cells[x][y];
        return !cell.isBomb() && !cell.isRevealed() && !cell.isFlagged();
    }

    public int getFlagCount() {
        int flags = 0;
        for (Cell[] row : cells) {
            for (Cell c : row) {
                if (c.isFlagged()) flags++;
            }
        }
        return flags;
    }

    public int getRows() { return rows; }
    public int getCols() { return cols; }
    public int getBombs() { return bombs; }
    public Cell[][] getCells() { return cells; }
    public boolean isGameOver() { return gameOver; }
    public boolean isGameWon() { return gameWon; }
    public boolean isFirstClick() { return firstClick; }
}

class FileBasedManager {
    protected void ensureFileExists(String filePath) {
        File file = new File(filePath);
        if (!file.exists()) {
            try {
                File parent = file.getParentFile();
                if (parent != null && !parent.exists()) {
                    parent.mkdirs();
                }
                file.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error creating file: " + e.getMessage(),
                        "File Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}

class ScoreManager extends FileBasedManager {
    private static final String FILE_NAME = "highscores.txt";

    public ScoreManager() {
        ensureFileExists(FILE_NAME);
    }

    public void saveTime(String difficulty, String username, int time) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true))) {
            writer.write(difficulty + "," + username + "," + time);
            writer.newLine();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving score: " + e.getMessage(),
                    "Score Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public List<String> getTopTimes(String difficulty) {
        List<String> times = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 3 && parts[0].equals(difficulty)) {
                    times.add(parts[1] + ": " + parts[2] + "s");
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading scores: " + e.getMessage(),
                    "Score Error", JOptionPane.ERROR_MESSAGE);
        }

        times.sort(Comparator.comparingInt(s -> Integer.parseInt(s.split(": ")[1].replace("s", ""))));
        return times.subList(0, Math.min(5, times.size()));
    }
}

class StatsManager extends FileBasedManager {
    private static final String FILE_NAME = "Project/stats.txt";
    private final Map<String, int[]> stats = new HashMap<>();

    public StatsManager() {
        ensureFileExists(FILE_NAME);
        loadStats();
    }

    private void loadStats() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 4) {
                    String key = parts[0];
                    int gamesPlayed = Integer.parseInt(parts[1]);
                    int gamesWon = Integer.parseInt(parts[2]);
                    int bestTime = Integer.parseInt(parts[3]);
                    stats.put(key, new int[]{gamesPlayed, gamesWon, bestTime});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading stats: " + e.getMessage(),
                    "Stats Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveStats() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Map.Entry<String, int[]> entry : stats.entrySet()) {
                int[] val = entry.getValue();
                writer.write(entry.getKey() + "," + val[0] + "," + val[1] + "," + val[2]);
                writer.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving stats: " + e.getMessage(),
                    "Stats Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void recordGame(String difficulty, boolean won, int time) {
        int[] s = stats.getOrDefault(difficulty, new int[]{0, 0, Integer.MAX_VALUE});
        s[0]++;
        if (won) {
            s[1]++;
            if (time < s[2]) s[2] = time;
        }
        stats.put(difficulty, s);
        saveStats();
    }

    public String getStatsText(String difficulty) {
        int[] s = stats.getOrDefault(difficulty, new int[]{0, 0, Integer.MAX_VALUE});
        double winRate = s[0] == 0 ? 0 : (s[1] * 100.0 / s[0]);
        String bestTimeStr = s[2] == Integer.MAX_VALUE ? "N/A" : s[2] + "s";
        return String.format("Stats for %s:\nGames Played: %d\nGames Won: %d\nWin Rate: %.2f%%\nBest Time: %s",
                difficulty, s[0], s[1], winRate, bestTimeStr);
    }
}

class GameBoard extends JPanel {
    private final Grid grid;
    public static final int CELL_SIZE = 40;
    private static final Color REVEALED_COLOR = new Color(220, 220, 220);
    private static final Color UNREVEALED_COLOR = new Color(180, 180, 180);
    private static final Color[] NUMBER_COLORS = {
            Color.BLUE, new Color(0, 130, 0), Color.RED, new Color(0, 0, 128),
            new Color(128, 0, 0), new Color(0, 128, 128), Color.BLACK, Color.GRAY
    };

    public GameBoard(Grid grid) {
        this.grid = grid;
        setPreferredSize(new Dimension(grid.getCols() * CELL_SIZE, grid.getRows() * CELL_SIZE));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        for (int i = 0; i < grid.getRows(); i++) {
            for (int j = 0; j < grid.getCols(); j++) {
                paintCell(g2d, i, j);
            }
        }
    }

    private void paintCell(Graphics2D g, int row, int col) {
        int x = col * CELL_SIZE;
        int y = row * CELL_SIZE;
        Cell cell = grid.getCells()[row][col];

        if (cell.isRevealed()) {
            g.setColor(REVEALED_COLOR);
            g.fillRect(x, y, CELL_SIZE, CELL_SIZE);

            if (cell.isBomb()) {
                drawBomb(g, x, y);
            } else if (cell.getNearbyBombs() > 0) {
                drawNumber(g, x, y, cell.getNearbyBombs());
            }
        } else {
            g.setColor(UNREVEALED_COLOR);
            g.fillRect(x, y, CELL_SIZE, CELL_SIZE);

            if (cell.isFlagged()) {
                drawFlag(g, x, y);
            }
        }

        g.setColor(Color.GRAY);
        g.drawRect(x, y, CELL_SIZE, CELL_SIZE);
    }

    private void drawBomb(Graphics2D g, int x, int y) {
        g.setColor(Color.BLACK);
        g.fillOval(x + 8, y + 8, CELL_SIZE - 16, CELL_SIZE - 16);

        g.setColor(Color.RED);
        g.fillOval(x + 13, y + 13, CELL_SIZE - 26, CELL_SIZE - 26);
    }

    private void drawNumber(Graphics2D g, int x, int y, int number) {
        g.setColor(NUMBER_COLORS[number - 1]);
        g.setFont(new Font("Arial", Font.BOLD, 20));
        g.drawString(Integer.toString(number), x + CELL_SIZE/2 - 6, y + CELL_SIZE/2 + 6);
    }

    private void drawFlag(Graphics2D g, int x, int y) {
        g.setColor(Color.RED);
        int[] xPoints = {x + 10, x + 25, x + 10};
        int[] yPoints = {y + 8, y + 15, y + 22};
        g.fillPolygon(xPoints, yPoints, 3);

        g.setColor(Color.BLACK);
        g.drawLine(x + 10, y + 8, x + 10, y + 30);
        g.fillRect(x + 5, y + 30, 12, 3);
    }
}

class ControlPanel extends JPanel {
    private final JLabel timerLabel;
    private final JLabel flagLabel;
    private final JLabel statusLabel;
    private final JButton hintBtn;
    private final JButton pauseBtn;
    private final JButton resetBtn;
    private final JTextArea scoreArea;
    private final JTextArea statsArea;

    public ControlPanel(int width, ActionListener hintAction, ActionListener pauseAction, ActionListener resetAction) {
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setPreferredSize(new Dimension(width, 500));

        timerLabel = createLabel("Time: 0s");
        flagLabel = createLabel("Flags: 0");
        statusLabel = createLabel("Status: Playing");

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        hintBtn = createButton("Hint", hintAction);
        pauseBtn = createButton("Pause", pauseAction);
        buttonPanel.add(hintBtn);
        buttonPanel.add(pauseBtn);

        resetBtn = createButton("Play Again", resetAction);

        scoreArea = createTextArea();
        statsArea = createTextArea();

        add(timerLabel);
        add(Box.createVerticalStrut(10));
        add(flagLabel);
        add(Box.createVerticalStrut(10));
        add(buttonPanel);
        add(Box.createVerticalStrut(10));
        add(statusLabel);
        add(Box.createVerticalStrut(20));
        add(resetBtn);
        add(Box.createVerticalStrut(20));

        JLabel scoresHeader = createLabel("Top Times:");
        add(scoresHeader);
        add(Box.createVerticalStrut(5));
        add(new JScrollPane(scoreArea));
        add(Box.createVerticalStrut(20));

        JLabel statsHeader = createLabel("Statistics:");
        add(statsHeader);
        add(Box.createVerticalStrut(5));
        add(new JScrollPane(statsArea));
    }

    private JLabel createLabel(String text) {
        JLabel label = new JLabel(text);
        label.setAlignmentX(LEFT_ALIGNMENT);
        return label;
    }

    private JButton createButton(String text, ActionListener action) {
        JButton button = new JButton(text);
        button.addActionListener(action);
        button.setAlignmentX(LEFT_ALIGNMENT);
        return button;
    }

    private JTextArea createTextArea() {
        JTextArea area = new JTextArea();
        area.setEditable(false);
        area.setFont(new Font("SansSerif", Font.PLAIN, 12));
        area.setAlignmentX(LEFT_ALIGNMENT);
        return area;
    }

    public void updateTimer(int seconds) {
        timerLabel.setText("Time: " + seconds + "s");
    }

    public void updateFlags(int count) {
        flagLabel.setText("Flags: " + count);
    }

    public void updateStatus(String text) {
        statusLabel.setText("Status: " + text);
    }

    public void updateScores(String text) {
        scoreArea.setText(text);
    }

    public void updateStats(String text) {
        statsArea.setText(text);
    }

    public void setPauseButtonText(String text) {
        pauseBtn.setText(text);
    }
}

public class Minesweeper extends JFrame {
    private final Difficulty difficulty;
    private final Grid grid;
    private final GameBoard board;
    private final ControlPanel controls;
    private final Timer timer;
    private final ScoreManager scores;
    private final StatsManager stats;
    private int seconds;
    private boolean paused;
    private boolean gameStarted;
    private final String playerName;

    public Minesweeper(Difficulty diff, String playerName) {
        this.difficulty = diff;
        this.grid = new Grid(diff.rows, diff.cols, diff.bombs);
        this.playerName = playerName;
        this.scores = new ScoreManager();
        this.stats = new StatsManager();
        this.seconds = 0;
        this.paused = false;
        this.gameStarted = false;

        setTitle("Minesweeper - " + diff.name);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        board = new GameBoard(grid);
        board.addMouseListener(new BoardMouseListener());

        controls = new ControlPanel(180,
                e -> handleHint(),
                e -> handlePause(),
                e -> handleReset()
        );

        timer = new Timer(1000, e -> {
            seconds++;
            controls.updateTimer(seconds);
        });

        updateScoresAndStats();

        JPanel contentPane = new JPanel(new BorderLayout(10, 0));
        contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));
        contentPane.add(board, BorderLayout.CENTER);
        contentPane.add(controls, BorderLayout.EAST);

        setContentPane(contentPane);
        pack();
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
    }

    private class BoardMouseListener extends MouseAdapter {
        @Override
        public void mousePressed(MouseEvent e) {
            if (paused || grid.isGameOver()) return;

            int col = e.getX() / GameBoard.CELL_SIZE;
            int row = e.getY() / GameBoard.CELL_SIZE;

            if (!gameStarted) {
                timer.start();
                gameStarted = true;
            }

            if (SwingUtilities.isRightMouseButton(e)) {
                grid.toggleFlag(row, col);
            } else {
                grid.reveal(row, col);
            }

            controls.updateFlags(grid.getFlagCount());
            board.repaint();

            checkGameStatus();
        }
    }

    private void handleHint() {
        if (paused || grid.isGameOver()) return;

        for (int i = 0; i < grid.getRows(); i++) {
            for (int j = 0; j < grid.getCols(); j++) {
                if (grid.isSafeCell(i, j)) {
                    grid.reveal(i, j);
                    board.repaint();
                    checkGameStatus();
                    return;
                }
            }
        }
    }

    private void handlePause() {
        paused = !paused;
        controls.setPauseButtonText(paused ? "Resume" : "Pause");

        if (paused) {
            timer.stop();
        } else if (gameStarted && !grid.isGameOver()) {
            timer.start();
        }
    }

    private void handleReset() {
        dispose();
        new Minesweeper(difficulty, playerName);
    }

    private void checkGameStatus() {
        if (grid.isGameOver()) {
            timer.stop();
            stats.recordGame(difficulty.name, grid.isGameWon(), seconds);

            if (grid.isGameWon()) {
                controls.updateStatus("You won!");
                scores.saveTime(difficulty.name, playerName, seconds);
                updateScoresAndStats();
                showWinMessage();
            } else {
                controls.updateStatus("Game over!");
            }
        }
    }

    private void showWinMessage() {
        JOptionPane.showMessageDialog(this,
                "Congratulations, " + playerName + "! You won in " + seconds + " seconds!",
                "Victory", JOptionPane.INFORMATION_MESSAGE);
    }

    private void updateScoresAndStats() {
        List<String> topScores = scores.getTopTimes(difficulty.name);
        StringBuilder sb = new StringBuilder();
        for (String score : topScores) {
            sb.append(score).append("\n");
        }
        controls.updateScores(sb.toString());
        controls.updateStats(stats.getStatsText(difficulty.name));
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            // Fallback to default look and feel
        }

        SwingUtilities.invokeLater(() -> {
            String playerName = JOptionPane.showInputDialog(null, "Enter your name:",
                    "Minesweeper", JOptionPane.PLAIN_MESSAGE);

            if (playerName != null && !playerName.trim().isEmpty()) {
                Difficulty diff = (Difficulty) JOptionPane.showInputDialog(
                        null, "Select Difficulty:", "Minesweeper",
                        JOptionPane.PLAIN_MESSAGE, null,
                        Difficulty.values(), Difficulty.MEDIUM
                );

                if (diff != null) {
                    new Minesweeper(diff, playerName.trim());
                }
            }
        });
    }
}